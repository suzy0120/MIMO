pipeline {
    agent any

    environment {
        DOCKER_HUB_REPOSITORY = 'kimjunha/mimo'
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub')
    }

    stages {
        stage ('Checkout Code') {
            steps {
                checkout scm
                echo "Current branch is $BRANCH_NAME"
                script {
                    if (BRANCH_NAME.contains('develop')) {
                        TARGET = 'dev'
                    } else if (BRANCH_NAME.contains('release')) {
                        TARGET = 'green'
                    } else if (BRANCH_NAME.contains('master')) {
                        TARGET = 'blue'
                    }
                }
            }
        }
        stage ('Build Jar') {
            steps {
                dir('backend') {
                    script {
                        try {
                            echo "Building jar"
                            sh "chmod +x gradlew"
                            sh "./gradlew clean bootjar"
                        } catch (Exception e) {
                            echo "Build failed. Check the error message."
                            currentBuild.result = 'FAILURE'
                            error("Build failed while building jar file.")
                        }
                    }
                }
            }
        }
        stage ('Sign in Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                }
            }
        }
        stage ('Build Image and Run') {
            steps {
                dir('backend') {
                    script {
                        echo "Deploying $TARGET"
                        sh "docker compose down $TARGET && docker compose up $TARGET --build -d"
                        sh "docker tag mimo_$TARGET:latest $DOCKER_HUB_REPOSITORY:$TARGET-latest"
                        sh "docker push $DOCKER_HUB_REPOSITORY:$TARGET-latest"
                    }
                }
            }
        }
        stage ('Health Check') {
            steps {
                echo "Wait until container get ready..."
                sleep 10
                script {
                    if (TARGET == 'dev') {
                        TEST_URL = 'https://k10a204.p.ssafy.io/dev/check'
                    } else {
                        TEST_URL = 'https://k10a204.p.ssafy.io/check'
                    }
                    try {
                        HTTP_RESPONSE = sh(script: "curl -s -o /dev/null -w '%{http_code}' $TEST_URL", returnStdout: true).trim()
                        echo "Container status: $HTTP_RESPONSE"
                        if (HTTP_RESPONSE < '400') {
                            STABLE = true
                            echo "Build stable"
                            echo "Push latest stable image"
                        } else {
                            STABLE = false
                            echo "Build unstable"
                            echo "Rollback to previous stable image"
                        }
                    } catch (Exception e) {
                        STABLE = false
                        echo "Build unstable"
                        echo "Rollback to previous stable image"
                    }
                }
            }
        }
        stage ('Unstable: Rollback') {
            steps {
                dir('backend') {
                    script {
                        if (!STABLE) {
                            try {
                                sh "docker tag mimo_$TARGET:latest mimo_$TARGET:last-failed"
                                sh "docker pull $DOCKER_HUB_REPOSITORY:$TARGET-stable"
                                sh "docker tag $DOCKER_HUB_REPOSITORY:$TARGET-stable mimo_$TARGET:latest"
                                sh "docker compose down $TARGET && docker compose up $TARGET --build -d"
                                echo "Rollback completed"
                            } catch (Exception e) {
                                echo "Rollback failed"
                            }
                        }
                    }
                }
            }
        }
        stage ('Stable: Push') {
            steps {
                script {
                    if (STABLE) {
                        sh "docker tag mimo_$TARGET:latest $DOCKER_HUB_REPOSITORY:$TARGET-stable"
                        sh "docker push $DOCKER_HUB_REPOSITORY:$TARGET-stable"
                        echo "Push completed"
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Build completed"
            sh "docker image prune -f"
        }
    }
}
